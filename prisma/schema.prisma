// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credentials provider

  // プロフィール情報
  phoneNumber String?
  address     String?
  birthDate   DateTime?
  bio         String?   @db.Text

  // 規約・ポリシー同意状況
  termsAccepted      Boolean   @default(false)
  termsAcceptedAt    DateTime?
  privacyAccepted    Boolean   @default(false)
  privacyAcceptedAt  DateTime?
  commerceAccepted   Boolean   @default(false)
  commerceAcceptedAt DateTime?

  // ユーザー独自の規約・ポリシー
  userTermsOfService String? @db.Text // ユーザー独自の利用規約
  userPrivacyPolicy  String? @db.Text // ユーザー独自のプライバシーポリシー
  userCommerceLaw    String? @db.Text // ユーザー独自の特定商取引法に基づく表記

  // freee連携設定
  freeeClientId     String? // freee OAuth Client ID
  freeeClientSecret String? // freee OAuth Client Secret
  freeeRedirectUri  String? // freee OAuth Redirect URI
  
  // freee個人アクセストークン（簡易連携用）
  freeePersonalAccessToken String? // freee Personal Access Token
  freeeAuthType String? @default("oauth") // "oauth" or "personal_token"

  accounts  Account[]
  sessions  Session[]
  products  Product[]
  addresses Address[]
  payments  Payment[]
  settings  UserSettings?
  accountingSyncSettings AccountingSyncSettings[]
  accountingSyncHistory  AccountingSyncHistory[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Product {
  id             String    @id @default(cuid())
  uuid           String    @unique @default(uuid()) // 公開用UUID
  name           String
  price          Decimal   @db.Decimal(10, 2)
  paymentAddress String? // 支払いアドレス
  stock          Int       @default(0)
  saleStartDate  DateTime?
  saleEndDate    DateTime?
  description    String?   @db.Text
  callbackUrl    String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  images       ProductImage[]
  customFields ProductCustomField[]
  payments     Payment[]
  productLocks ProductLock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        String @id @default(cuid())
  productId String
  filename  String
  url       String
  order     Int    @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model ProductCustomField {
  id         String  @id @default(cuid())
  productId  String
  fieldName  String
  fieldType  String // "text", "email", "number", "textarea", "checkbox", "select"
  isRequired Boolean @default(false)
  options    String? @db.Text // JSON string for select options

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id          String  @id @default(cuid())
  name        String // アドレス名
  address     String // Symbolアドレス
  type        String  @default("other") // main, payment, donation, savings, other
  description String? @db.Text // 説明
  isDefault   Boolean @default(false) // デフォルトアドレス

  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[] // このアドレスで受信した決済

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, address]) // 同じユーザーが同じアドレスを重複登録することを防ぐ
}

model Payment {
  id            String    @id @default(cuid())
  paymentId     String    @unique // 支払いID (UUID)
  productId     String
  userId        String?
  addressId     String // 受信アドレスID
  amount        Decimal   @db.Decimal(20, 0) // マイクロXYM単位で保存
  status        String    @default("pending") // pending, confirmed, expired, cancelled
  transactionId String? // Symbolトランザクションハッシュ
  symbolHash    String? // Symbolトランザクションハッシュ (後方互換)
  senderAddress String? // 送信者アドレス
  message       String? // トランザクションメッセージ
  expireAt      DateTime // 有効期限
  confirmedAt   DateTime? // 決済確認日時
  cancelledAt   DateTime? // キャンセル日時
  formData      Json? // カスタムフォームデータ

  // 為替レート情報
  exchangeRate       Decimal?  @db.Decimal(20, 8) // 決済時の為替レート
  baseCurrency       String?   @default("JPY") // 基準通貨
  baseCurrencyAmount Decimal?  @db.Decimal(20, 8) // 基準通貨での金額
  rateProvider       String? // レート提供者
  rateTimestamp      DateTime? // レート取得時刻

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  syncedPayments SyncedPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductLock {
  id        String   @id @default(cuid())
  productId String
  sessionId String // セッションID
  paymentId String // 決済ID
  expireAt  DateTime // ロック有効期限

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([productId, sessionId])
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  autoPaymentMonitoring Boolean @default(true) // 自動決済確認の設定
  
  // 通知設定
  notifications         Boolean @default(true) // 一般通知設定
  emailNotifications    Boolean @default(true) // メール通知設定

  // 通貨設定
  baseCurrency     String @default("JPY") // 基準通貨 (JPY, USD, EUR等)
  currencySettings Json   @default("{}") // 通貨詳細設定

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemExchangeRates {
  id             String   @id @default(cuid())
  baseCurrency   String // 基準通貨 (JPY, USD, EUR等)
  targetCurrency String   @default("XYM") // 対象通貨
  rate           Decimal  @db.Decimal(20, 8) // 為替レート
  provider       String // プロバイダー名
  timestamp      DateTime @default(now()) // レート取得時刻
  isActive       Boolean  @default(true) // アクティブフラグ
  metadata       Json     @default("{}") // 追加情報

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([baseCurrency, targetCurrency, provider])
  @@index([baseCurrency, targetCurrency])
  @@index([timestamp])
}

// 会計ソフト同期設定
model AccountingSyncSettings {
  id          String   @id @default(cuid())
  userId      String
  provider    String   // 'freee', 'mf', 'yayoi', 'csv'
  isEnabled   Boolean  @default(true)
  
  // 認証情報
  accessToken  String?  @db.Text
  refreshToken String?  @db.Text
  companyId    String?
  
  // 同期設定
  autoSync        Boolean @default(false)
  syncFrequency   String  @default("daily") // 'realtime', 'daily', 'weekly', 'monthly'
  lastSyncAt      DateTime?
  
  // 会計設定
  defaultTaxRate       Decimal @default(10.00) @db.Decimal(5,2)
  defaultAccountCode   String  @default("4110")
  exchangeRateSource   String  @default("api") // 'manual', 'api'
  
  // フィルター設定
  minAmount        Decimal? @db.Decimal(15,6)
  excludeStatuses  String[] @default([])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncHistory   AccountingSyncHistory[]
  syncedPayments SyncedPayment[]
  
  @@unique([userId, provider])
}

// 同期履歴
model AccountingSyncHistory {
  id         String   @id @default(cuid())
  userId     String
  settingsId String
  
  // 同期実行情報
  syncType    String   // 'manual', 'auto', 'batch'
  status      String   // 'success', 'failed', 'partial', 'running'
  startedAt   DateTime
  completedAt DateTime?
  
  // 同期結果
  totalRecords  Int @default(0)
  successCount  Int @default(0)
  failedCount   Int @default(0)
  skippedCount  Int @default(0)
  
  // 対象期間
  dateFrom DateTime?
  dateTo   DateTime?
  
  // エラー情報
  errors  Json? // SyncError[]
  summary String?
  
  createdAt DateTime @default(now())
  
  // Relations
  user     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  settings AccountingSyncSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
}

// 同期済み取引追跡
model SyncedPayment {
  id         String   @id @default(cuid())
  paymentId  String
  settingsId String
  externalId String?  // 会計ソフト側のID
  syncedAt   DateTime
  syncData   Json?    // 送信したデータのコピー
  
  createdAt DateTime @default(now())
  
  // Relations
  payment  Payment                @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  settings AccountingSyncSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  
  @@unique([paymentId, settingsId])
}
